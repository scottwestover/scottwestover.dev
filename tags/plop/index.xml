<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plop on Scott Westover</title><link>https://scottwestover.dev/tags/plop/</link><description>Recent content in Plop on Scott Westover</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Apr 2022 00:00:02 +0000</lastBuildDate><atom:link href="https://scottwestover.dev/tags/plop/index.xml" rel="self" type="application/rss+xml"/><item><title>Plop Basics Tutorial</title><link>https://scottwestover.dev/post/2022/04/plop-basics-tutorial/</link><pubDate>Mon, 11 Apr 2022 00:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2022/04/plop-basics-tutorial/</guid><description>In one of my recent developer bytes articles, I discussed with you some of the benefits of the micro-generator framework tool Plop and how I used this tool in my day to day. In this article I want to expand on the example the example I shared in the last article. So, in this tutorial we will be creating a Plop generator that will create a Vue component in TypeScript, and we will be going over the basics to create your own generators.</description></item><item><title>Developer Bytes - Plop</title><link>https://scottwestover.dev/post/2022/04/developer-bytes-plopjs/</link><pubDate>Thu, 07 Apr 2022 00:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2022/04/developer-bytes-plopjs/</guid><description>For the first Developer Bytes article, I wanted to share with everyone a tool that I have found extremely useful and easy to use called Plop . Plop is a micro-generator framework that can be used for generating new files in a consistent manner using templates you define. This simple tool gives you a way to generate code or any type of file, by running a simple console command.
This is all done via the config plop file that is written in JavaScript, where you specify the commands for the various generators you want to create.</description></item></channel></rss>