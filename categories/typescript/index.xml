<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on Scott Westover</title><link>https://scottwestover.dev/categories/typescript/</link><description>Recent content in TypeScript on Scott Westover</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 May 2023 16:00:02 +0000</lastBuildDate><atom:link href="https://scottwestover.dev/categories/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Dependency Injection In Phaser 3 (Video)</title><link>https://scottwestover.dev/post/2023/05/simple-dependency-injection-in-phaser-3-video/</link><pubDate>Thu, 18 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/05/simple-dependency-injection-in-phaser-3-video/</guid><description>If you are interested in learning how to implement simple dependency injection in Phaser 3, you should check out this new video that I released on YouTube: Effortless Phaser 3 Development with Simple Dependency Injection.
I hope you enjoy the new content! Please feel free to post any questions or comments below.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 5 (Video)</title><link>https://scottwestover.dev/post/2023/05/build-a-connect-four-library-in-typescript-part-5-video/</link><pubDate>Thu, 11 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/05/build-a-connect-four-library-in-typescript-part-5-video/</guid><description>If you are interested in learning how to create a reusable Connect Four library in TypeScript, then you should check out the fifth video in my new series that I released on YouTube: Building a Connect Four Library in TypeScript - Step by Step Guide - Part 5.
If you prefer a written tutorial, then you can find the same content here on my blog: Build A Connect Four Library In TypeScript - Part 5 .</description></item><item><title>Build A Connect Four Library In TypeScript - Part 4 (Video)</title><link>https://scottwestover.dev/post/2023/05/build-a-connect-four-library-in-typescript-part-4-video/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/05/build-a-connect-four-library-in-typescript-part-4-video/</guid><description>If you are interested in learning how to create a reusable Connect Four library in TypeScript, then you should check out the fourth video in my new series that I released on YouTube: Building a Connect Four Library in TypeScript - Step by Step Guide - Part 4.
If you prefer a written tutorial, then you can find the same content here on my blog: Build A Connect Four Library In TypeScript - Part 4 .</description></item><item><title>Solitaire HTML5 Game Tutorial With Phaser 3 Part 1: Project Setup</title><link>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-1/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-1/</guid><description>The game of Solitaire is a fun classic single player card game that involves strategy, patience, and sometimes a bit of luck. The card game involves arranging cards in a specific order based on suit and rank, and the goal is to move all the cards from the tableau (the main playing area) into a set of foundations (four piles), each starting with an Ace and building up in ascending order to a King.</description></item><item><title>Solitaire HTML5 Game Tutorial With Phaser 3 Part 2: Game Layout</title><link>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-2/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-2/</guid><description>In this tutorial series, we’ll be looking at how to recreate the game Solitaire using the Phaser 3 framework. Here’s an example of what the final game should look like:
Previously, in part 1 , we reviewed the rules and game play of the game Solitaire, setup our project files, and loaded in the assets we will need for our game.
In part 2 of this series, we are going to start building out the layout of our game.</description></item><item><title>Solitaire HTML5 Game Tutorial With Phaser 3 Part 3: Player Input</title><link>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-3/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-3/</guid><description>In this tutorial series, we’ll be looking at how to recreate the game Solitaire using the Phaser 3 framework. Here’s an example of what the final game should look like:
Previously, in part 2 , we worked on creating the main layout for our game.
In part 3 of this series, we are going to start working on making our game interactive and we will add support for player input.</description></item><item><title>Solitaire HTML5 Game Tutorial With Phaser 3 Part 4: Moving Cards</title><link>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-4/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-4/</guid><description>In this tutorial series, we’ll be looking at how to recreate the game Solitaire using the Phaser 3 framework. Here’s an example of what the final game should look like:
Previously, in part 3 , we focused on adding support for player input by listening for click and drag events in our game.
In part 4 of this series, we are going to start working on adding support for moving cards between the various card piles in our game.</description></item><item><title>Solitaire HTML5 Game Tutorial With Phaser 3 Part 5: Core Solitaire Logic</title><link>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-5/</link><pubDate>Thu, 04 May 2023 16:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2024/08/solitaire-phaser-3-tutorial-5/</guid><description>In this tutorial series, we’ll be looking at how to recreate the game Solitaire using the Phaser 3 framework. Here’s an example of what the final game should look like:
Previously, in part 4 , we focused on adding support for moving cards between the various card piles in our game, and we started to stub out the Solitaire class that will have the core logic for our Solitaire game.</description></item><item><title>Quick &amp; Easy Game State Saving with JavaScript &amp; LocalStorage Video</title><link>https://scottwestover.dev/post/2023/04/quick-and-easy-game-state-saving-with-javascript-and-localstorage/</link><pubDate>Sun, 23 Apr 2023 12:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/04/quick-and-easy-game-state-saving-with-javascript-and-localstorage/</guid><description>If you are interested in learning how you can easily use JavaScript and the browser LocalStorage to easily and quickly save your game state, then you should check out the third video in my new series that I released on YouTube: Quick &amp;amp; Easy Game State Saving with JavaScript &amp;amp; LocalStorage!.
I hope you enjoy the new content! Please feel free to post any questions or comments below.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 3 (Video)</title><link>https://scottwestover.dev/post/2023/04/build-a-connect-four-library-in-typescript-part-3-video/</link><pubDate>Mon, 10 Apr 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/04/build-a-connect-four-library-in-typescript-part-3-video/</guid><description>If you are interested in learning how to create a reusable Connect Four library in TypeScript, then you should check out the third video in my new series that I released on YouTube: Building a Connect Four Library in TypeScript - Step by Step Guide - Part 3.
If you prefer a written tutorial, then you can find the same content here on my blog: Build A Connect Four Library In TypeScript - Part 3 .</description></item><item><title>Phaser 3 Inter Scene Communication Tutorial Video</title><link>https://scottwestover.dev/post/2023/03/phaser-3-inter-scene-communication-tutorial-video/</link><pubDate>Sun, 12 Mar 2023 18:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/03/phaser-3-inter-scene-communication-tutorial-video/</guid><description>If you are interested in learning how you can easily communicate between Scenes in Phaser 3 by using the Phaser 3 EventEmitter, then you should check out the third video in my new series that I released on YouTube: Phaser 3 Tutorial: Inter-Scene Communication Made Easy!.
I hope you enjoy the new content! Please feel free to post any questions or comments below.</description></item><item><title>Creating a Zelda-Style Health Bar in Phaser 3 - Tutorial Video</title><link>https://scottwestover.dev/post/2023/03/creating-a-zelda-style-health-bar-in-phaser-3-tutorial-video/</link><pubDate>Tue, 07 Mar 2023 18:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/03/creating-a-zelda-style-health-bar-in-phaser-3-tutorial-video/</guid><description>If you are interested in learning how to create a simple health bar in Phaser 3 to look like the health bars from games like the Legend of Zelda!, then you should check out the third video in my new series that I released on YouTube: Creating a Zelda-Style Health Bar in Phaser 3 - Tutorial.
I hope you enjoy the new content! Please feel free to post any questions or comments below.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 2 (Video)</title><link>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-2-video/</link><pubDate>Mon, 27 Feb 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-2-video/</guid><description>If you are interested in learning how to create a reusable Connect Four library in TypeScript, then you should check out the second video in my new series that I released on YouTube earlier today: Building a Connect Four Library in TypeScript - Step by Step Guide - Part 2.
If you prefer a written tutorial, then you can find the same content here on my blog: Build A Connect Four Library In TypeScript - Part 2 .</description></item><item><title>Build A Connect Four Library In TypeScript - Part 1 (Video)</title><link>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-1-video/</link><pubDate>Thu, 23 Feb 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-1-video/</guid><description>If you are interested in learning how to create a reusable Connect Four library in TypeScript, then you should check out my new video that I released on YouTube earlier today: Building a Connect Four Library in TypeScript - Step by Step Guide - Part 1.
If you prefer a written tutorial, then you can find the same content here on my blog: Build A Connect Four Library In TypeScript - Part 1 .</description></item><item><title>Build A Connect Four Library In TypeScript - Part 5</title><link>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-5/</link><pubDate>Tue, 07 Feb 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-5/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 4 , we finished updating the logic for checking if a player won the game by getting a Connect Four.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 4</title><link>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-4/</link><pubDate>Fri, 03 Feb 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/02/build-a-connect-four-library-in-typescript-part-4/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 3 , we added the logic for allowing the player to place a game piece in a column, logic for validating this move, and we started adding the logic for if the game is over.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 3</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-3/</link><pubDate>Fri, 20 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-3/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 2 , we added the initial game initialization logic, the ability to reset the game state, and we then learned how we could test our code using the uvu framework.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 2</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-2/</link><pubDate>Tue, 17 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-2/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 1 , we reviewed the rules and game play of the game Connect Four and we started to build out the initial ConnectFour class by adding the properties and methods that will be needed.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 1</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-1/</link><pubDate>Sun, 15 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-1/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
In part 1 of this series, we are going to review the rules and game play of the game Connect Four and we will start to build out the initial ConnectFour class by adding the properties and methods that will be needed.</description></item><item><title>Phaser 100 Days Of Code Challenge Day 2</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-2/</link><pubDate>Thu, 25 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-2/</guid><description>For the second day, I decided to take the code I worked on in day 1 and to refactor it. For the first step, I broke up the code into new classes. Once I had this working, I decided that I wanted to try and create a plugin from this code so that way the code could be re-used in other projects. I also ran into some issues with my linting, so I updated the project to use the typescript version of the airbnb config.</description></item><item><title>Phaser 100 Days Of Code Challenge Day 1</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-1/</link><pubDate>Wed, 24 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-1/</guid><description>For the first day, I decided to start simple and focus on getting the codebase setup that way I can keep my daily log and code in the same repository. Since I decided to use TypeScript for my challenge, this meant that I would need something to transpile my code so it can run in the browser, and I already had a template setup to do this. However, I didn&amp;rsquo;t want to create a seperate code base for each example since it would be hard to maintain, and ideally I only wanted one configuration file for the whole challenge.</description></item><item><title>Phaser 100 Days Of Code Challenge</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge/</link><pubDate>Tue, 23 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge/</guid><description>Between work, home life, and the side projects I am working on, I haven&amp;rsquo;t been spending as much time on my game development projects as I would like. So in order to change things up, I thought it would be fun to challenge myself to coding an hour a day with the Phaser 3 framework by doing the #100DaysOfCode challenge. If you are not familiar, the #100DaysOfCode is a challenge to code for one hour a day for the next 100 days and to publicly commit to the challenge by tweeting your progress each day.</description></item><item><title>Creating A Memory Game Class in TypeScript</title><link>https://scottwestover.dev/post/2020/06/creating-a-memory-game-in-typescript/</link><pubDate>Mon, 15 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/creating-a-memory-game-in-typescript/</guid><description>Intro The purpose of this tutorial is to show you how to create a simple Memory Game class in TypeScript that will contain all of the core game logic for building a simple Memory Game. For this tutorial, we will be testing our game logic using the browser developer console. However, in future tutorials, I will be showing you how we can take this class and create a basic Memory Game using HTML5 game frameworks like Phaser and Kontra.</description></item></channel></rss>