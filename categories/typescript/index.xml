<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on Scott Westover</title><link>https://scottwestover.dev/categories/typescript/</link><description>Recent content in TypeScript on Scott Westover</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 20 Jan 2023 06:00:02 +0000</lastBuildDate><atom:link href="https://scottwestover.dev/categories/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Build A Connect Four Library In TypeScript - Part 3</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-3/</link><pubDate>Fri, 20 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-3/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 2 , we added the initial game initialization logic, the ability to reset the game state, and we then learned how we could test our code using the uvu framework.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 2</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-2/</link><pubDate>Tue, 17 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-2/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
Previously, in part 1 , we reviewed the rules and game play of the game Connect Four and we started to build out the initial ConnectFour class by adding the properties and methods that will be needed.</description></item><item><title>Build A Connect Four Library In TypeScript - Part 1</title><link>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-1/</link><pubDate>Sun, 15 Jan 2023 06:00:02 +0000</pubDate><guid>https://scottwestover.dev/post/2023/01/build-a-connect-four-library-in-typescript-part-1/</guid><description>In this series, we will go over how to create a reusable TypeScript class that can be used to build the game Connect Four, and in a future series we will see how we can use this library to create implementations of the Connect Four game for the CLI and the web.
In part 1 of this series, we are going to review the rules and game play of the game Connect Four and we will start to build out the initial ConnectFour class by adding the properties and methods that will be needed.</description></item><item><title>Phaser 100 Days Of Code Challenge Day 2</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-2/</link><pubDate>Thu, 25 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-2/</guid><description>For the second day, I decided to take the code I worked on in day 1 and to refactor it. For the first step, I broke up the code into new classes. Once I had this working, I decided that I wanted to try and create a plugin from this code so that way the code could be re-used in other projects. I also ran into some issues with my linting, so I updated the project to use the typescript version of the airbnb config.</description></item><item><title>Phaser 100 Days Of Code Challenge Day 1</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-1/</link><pubDate>Wed, 24 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge-day-1/</guid><description>For the first day, I decided to start simple and focus on getting the codebase setup that way I can keep my daily log and code in the same repository. Since I decided to use TypeScript for my challenge, this meant that I would need something to transpile my code so it can run in the browser, and I already had a template setup to do this. However, I didn&amp;rsquo;t want to create a seperate code base for each example since it would be hard to maintain, and ideally I only wanted one configuration file for the whole challenge.</description></item><item><title>Phaser 100 Days Of Code Challenge</title><link>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge/</link><pubDate>Tue, 23 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/phaser-100-days-of-code-challenge/</guid><description>Between work, home life, and the side projects I am working on, I haven&amp;rsquo;t been spending as much time on my game development projects as I would like. So in order to change things up, I thought it would be fun to challenge myself to coding an hour a day with the Phaser 3 framework by doing the #100DaysOfCode challenge. If you are not familiar, the #100DaysOfCode is a challenge to code for one hour a day for the next 100 days and to publicly commit to the challenge by tweeting your progress each day.</description></item><item><title>Creating A Memory Game Class in TypeScript</title><link>https://scottwestover.dev/post/2020/06/creating-a-memory-game-in-typescript/</link><pubDate>Mon, 15 Jun 2020 00:00:01 +0000</pubDate><guid>https://scottwestover.dev/post/2020/06/creating-a-memory-game-in-typescript/</guid><description>Intro The purpose of this tutorial is to show you how to create a simple Memory Game class in TypeScript that will contain all of the core game logic for building a simple Memory Game. For this tutorial, we will be testing our game logic using the browser developer console. However, in future tutorials, I will be showing you how we can take this class and create a basic Memory Game using HTML5 game frameworks like Phaser and Kontra.</description></item></channel></rss>